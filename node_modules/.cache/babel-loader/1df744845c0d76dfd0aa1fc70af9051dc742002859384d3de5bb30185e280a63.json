{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KAVI\\\\OneDrive\\\\Documents\\\\FS\\\\Medicine Remainder App\\\\medicineremainder\\\\src\\\\components\\\\MedicineReminder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedicineReminder = () => {\n  _s();\n  const [medicines, setMedicines] = useState([]);\n  const [name, setName] = useState('');\n  const [dosage, setDosage] = useState('');\n  const [time, setTime] = useState('');\n\n  // Load medicines from localStorage on component mount\n  useEffect(() => {\n    const storedMedicines = JSON.parse(localStorage.getItem('medicines')) || [];\n    setMedicines(storedMedicines);\n  }, []);\n\n  // Save medicines to localStorage whenever the medicines state changes\n  useEffect(() => {\n    localStorage.setItem('medicines', JSON.stringify(medicines));\n  }, [medicines]);\n\n  // Request notification permission when the component mounts\n  useEffect(() => {\n    if (Notification.permission !== 'granted') {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  // Check every minute for scheduled medicines\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      const currentTime = now.toTimeString().slice(0, 5); // Format as HH:MM\n      medicines.forEach(med => {\n        if (med.time === currentTime) {\n          notifyUser(med);\n        }\n      });\n    }, 60000); // Check every 60 seconds\n\n    return () => clearInterval(interval); // Cleanup the interval on component unmount\n  }, [medicines]);\n\n  // Show a browser notification for a scheduled medicine\n  const notifyUser = med => {\n    if (Notification.permission === 'granted') {\n      new Notification('Medicine Reminder', {\n        body: `${med.name} - ${med.dosage} now!`,\n        icon: 'https://cdn-icons-png.flaticon.com/512/2920/2920244.png'\n      });\n    }\n  };\n\n  // Add a new medicine reminder directly\n  const addMedicine = () => {\n    if (!name || !dosage || !time) {\n      return; // Prevent adding empty values\n    }\n    const newMedicine = {\n      name,\n      dosage,\n      time,\n      id: new Date().getTime()\n    };\n    setMedicines([...medicines, newMedicine]);\n    setName(''); // Clear the input fields after adding\n    setDosage('');\n    setTime('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"medicine-reminder-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC8A Medicine Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Medicine Name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        placeholder: \"Enter medicine name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Dosage: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: dosage,\n        onChange: e => setDosage(e.target.value),\n        placeholder: \"Enter dosage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Time: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: time,\n        onChange: e => setTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addMedicine,\n      children: \"Add Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC5 Scheduled Medicines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: medicines.map(med => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [med.name, \" - \", med.dosage, \" at \", med.time]\n      }, med.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(MedicineReminder, \"D+0UJbJDq0OJOHa7/UGm1VJeEx4=\");\n_c = MedicineReminder;\nexport default MedicineReminder;\nvar _c;\n$RefreshReg$(_c, \"MedicineReminder\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MedicineReminder","_s","medicines","setMedicines","name","setName","dosage","setDosage","time","setTime","storedMedicines","JSON","parse","localStorage","getItem","setItem","stringify","Notification","permission","requestPermission","interval","setInterval","now","Date","currentTime","toTimeString","slice","forEach","med","notifyUser","clearInterval","body","icon","addMedicine","newMedicine","id","getTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/KAVI/OneDrive/Documents/FS/Medicine Remainder App/medicineremainder/src/components/MedicineReminder.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst MedicineReminder = () => {\r\n  const [medicines, setMedicines] = useState([]);\r\n  const [name, setName] = useState('');\r\n  const [dosage, setDosage] = useState('');\r\n  const [time, setTime] = useState('');\r\n\r\n  // Load medicines from localStorage on component mount\r\n  useEffect(() => {\r\n    const storedMedicines = JSON.parse(localStorage.getItem('medicines')) || [];\r\n    setMedicines(storedMedicines);\r\n  }, []);\r\n\r\n  // Save medicines to localStorage whenever the medicines state changes\r\n  useEffect(() => {\r\n    localStorage.setItem('medicines', JSON.stringify(medicines));\r\n  }, [medicines]);\r\n\r\n  // Request notification permission when the component mounts\r\n  useEffect(() => {\r\n    if (Notification.permission !== 'granted') {\r\n      Notification.requestPermission();\r\n    }\r\n  }, []);\r\n\r\n  // Check every minute for scheduled medicines\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const now = new Date();\r\n      const currentTime = now.toTimeString().slice(0, 5); // Format as HH:MM\r\n      medicines.forEach((med) => {\r\n        if (med.time === currentTime) {\r\n          notifyUser(med);\r\n        }\r\n      });\r\n    }, 60000); // Check every 60 seconds\r\n\r\n    return () => clearInterval(interval); // Cleanup the interval on component unmount\r\n  }, [medicines]);\r\n\r\n  // Show a browser notification for a scheduled medicine\r\n  const notifyUser = (med) => {\r\n    if (Notification.permission === 'granted') {\r\n      new Notification('Medicine Reminder', {\r\n        body: `${med.name} - ${med.dosage} now!`,\r\n        icon: 'https://cdn-icons-png.flaticon.com/512/2920/2920244.png',\r\n      });\r\n    }\r\n  };\r\n\r\n  // Add a new medicine reminder directly\r\n  const addMedicine = () => {\r\n    if (!name || !dosage || !time) {\r\n      return; // Prevent adding empty values\r\n    }\r\n\r\n    const newMedicine = { name, dosage, time, id: new Date().getTime() };\r\n    setMedicines([...medicines, newMedicine]);\r\n    setName(''); // Clear the input fields after adding\r\n    setDosage('');\r\n    setTime('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"medicine-reminder-container\">\r\n      <h1>ðŸ’Š Medicine Reminder</h1>\r\n\r\n      {/* Input fields without form */}\r\n      <div>\r\n        <label>Medicine Name: </label>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          placeholder=\"Enter medicine name\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label>Dosage: </label>\r\n        <input\r\n          type=\"text\"\r\n          value={dosage}\r\n          onChange={(e) => setDosage(e.target.value)}\r\n          placeholder=\"Enter dosage\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label>Time: </label>\r\n        <input\r\n          type=\"time\"\r\n          value={time}\r\n          onChange={(e) => setTime(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <button onClick={addMedicine}>Add Reminder</button>\r\n\r\n      <h2>ðŸ“… Scheduled Medicines</h2>\r\n      <ul>\r\n        {medicines.map((med) => (\r\n          <li key={med.id}>\r\n            {med.name} - {med.dosage} at {med.time}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MedicineReminder;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}