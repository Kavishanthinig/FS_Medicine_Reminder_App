{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KAVI\\\\OneDrive\\\\Documents\\\\FS\\\\Medicine Remainder App\\\\medicineremainder\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Dashboard.css';\nimport MedicineReminder from './MedicineReminder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [medicines, setMedicines] = useState([]);\n  const [showReminderForm, setShowReminderForm] = useState(false);\n\n  // Load medicines from local storage (or you can use an API)\n  useEffect(() => {\n    const storedMedicines = JSON.parse(localStorage.getItem('medicines')) || [];\n    setMedicines(storedMedicines);\n  }, []);\n\n  // Save medicines to local storage whenever the list changes\n  useEffect(() => {\n    localStorage.setItem('medicines', JSON.stringify(medicines));\n  }, [medicines]);\n  const toggleReminderForm = () => {\n    setShowReminderForm(!showReminderForm);\n  };\n  const handleAddReminder = reminder => {\n    setMedicines(prevMedicines => [...prevMedicines, reminder]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Your Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Manage your medicine reminders below.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-reminder-btn\",\n      onClick: toggleReminderForm,\n      children: showReminderForm ? 'Hide Reminder Form' : 'Add New Reminder'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), showReminderForm && /*#__PURE__*/_jsxDEV(MedicineReminder, {\n      onAddReminder: handleAddReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Scheduled Medicines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: medicines.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No reminders set.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this) : medicines.map((med, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [med.name, \" - \", med.dosage, \" at \", med.time]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"3zsZkd6QkpxY6mF8PkKZz+9tAcE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MedicineReminder","jsxDEV","_jsxDEV","Dashboard","_s","medicines","setMedicines","showReminderForm","setShowReminderForm","storedMedicines","JSON","parse","localStorage","getItem","setItem","stringify","toggleReminderForm","handleAddReminder","reminder","prevMedicines","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onAddReminder","length","map","med","index","name","dosage","time","_c","$RefreshReg$"],"sources":["C:/Users/KAVI/OneDrive/Documents/FS/Medicine Remainder App/medicineremainder/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Dashboard.css';\r\nimport MedicineReminder from './MedicineReminder';\r\n\r\nconst Dashboard = () => {\r\n  const [medicines, setMedicines] = useState([]);\r\n  const [showReminderForm, setShowReminderForm] = useState(false);\r\n\r\n  // Load medicines from local storage (or you can use an API)\r\n  useEffect(() => {\r\n    const storedMedicines = JSON.parse(localStorage.getItem('medicines')) || [];\r\n    setMedicines(storedMedicines);\r\n  }, []);\r\n\r\n  // Save medicines to local storage whenever the list changes\r\n  useEffect(() => {\r\n    localStorage.setItem('medicines', JSON.stringify(medicines));\r\n  }, [medicines]);\r\n\r\n  const toggleReminderForm = () => {\r\n    setShowReminderForm(!showReminderForm);\r\n  };\r\n\r\n  const handleAddReminder = (reminder) => {\r\n    setMedicines((prevMedicines) => [...prevMedicines, reminder]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Welcome to Your Dashboard</h1>\r\n      <p>Manage your medicine reminders below.</p>\r\n\r\n      {/* Button to toggle the reminder form */}\r\n      <button className=\"add-reminder-btn\" onClick={toggleReminderForm}>\r\n        {showReminderForm ? 'Hide Reminder Form' : 'Add New Reminder'}\r\n      </button>\r\n\r\n      {/* Display MedicineReminder component if the form is toggled */}\r\n      {showReminderForm && (\r\n        <MedicineReminder onAddReminder={handleAddReminder} />\r\n      )}\r\n\r\n      {/* Display scheduled medicines */}\r\n      <h2>Your Scheduled Medicines</h2>\r\n      <ul>\r\n        {medicines.length === 0 ? (\r\n          <li>No reminders set.</li>\r\n        ) : (\r\n          medicines.map((med, index) => (\r\n            <li key={index}>\r\n              {med.name} - {med.dosage} at {med.time}\r\n            </li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}